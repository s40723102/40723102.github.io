<h1>簡介</h1>
<p>設計一甲-40723102林昱秀</p>
<<<<<<< HEAD
<h1>GIT指令</h1>
<p>&gt;C:/Y:   切換至C/Y槽</p>
<p>cd  更換目錄</p>
<p>cls 清理</p>
<p>git clone +網址  從遠端倉儲複製到近端(並建立工作目錄)</p>
<p>git pull  將遠端倉儲之最新版本更新回來</p>
<p>git status  檢查狀態</p>
<p>git log  查看版本之歷史紀錄</p>
<p>git branch  檢視分支</p>
<p>git branch name  建立分支</p>
<p>git checkout name  切換分支</p>
<p>git checkout -b name  建立分支並切換至最新分支</p>
<p>git checkout -d name  刪除分支</p>
<p>config --global user.name "40723102 or xxx"   設定使用者名稱</p>
<p>git config --global user.email "40723102@gm.nfu.edu.tw"   設定使用者信箱</p>
<p>git init  把當前目錄變成git可管理之倉儲</p>
<p>git show  查看該版本之相關資訊</p>
<p>git bebase  把另一分支變更,當作目前使用分支之基礎</p>
<p>git remote add xxx  註記在遠端下</p>
<p>git checkout .   回到上一個提交(當從上一個提交到下一次操作發生致命資料丟失使用)</p>
<p>git add . 拍快照</p>
<p>git commit -m "標題or描述"  把暫存區之檔案提交到倉儲</p>
<p>git push 把近端存儲庫中物件推到遠端倉儲</p><h1>Python是什麼</h1>
=======
<p>分組網站:<a href="https://mdewcm2019.github.io/wcm2019-task-g1/content/" rel="nofollow">https://mdewcm2019.github.io/wcm2019-task-g1/content/</a></p>
<h1>Python是什麼</h1>
>>>>>>> 6a40febdcc50abdb2066723ccf6dba381533f183
<p>1.<span style="color: #ff0000;">容易撰寫</span>-Python 通常可以靠比較短的程式碼完成較多的功能，或者可寫得比較清楚。</p>
<p>2.<span style="color: #ff0000;">功能強大</span>-Python絕大部分都是開放原始碼的，與主要作業系統的支援功能等等，含括的範圍非常地廣泛。</p>
<p>3.<span style="color: #ff0000;">跨平台</span>-各種主要的作業系統都支援 Python。Python 程式常常不需要修改。所撰寫的 Python 程式透過標準的模組進行包裝後，用標準的方式即可安裝於各種平台。</p>
<p>4.<span style="color: #ff0000;">容易擴充<span style="color: #000000;">-</span></span>Python 算是執行效率不錯的直譯式語言。Python本身被設計為可擴充的。因此，有很多人把Python作為一種「膠水語言」（glue language）使用。使用Python將其他語言編寫的程式進行整合和封裝。</p>
<<<<<<< HEAD
<p><img caption="false" height="302" src="/images/01.png" width="500"/></p><h1>個人操作練習</h1>
=======
<p><img caption="false" height="302" src="/images/01.png" width="500"/></p>
<h1>Git指令</h1>
<p>&gt;C:/Y: <span> </span><strong> 切換至C/Y槽</strong></p>
<p>cd <span> </span><strong>更換目錄</strong></p>
<p><span>cls<span> </span><strong>清理</strong></span></p>
<p><span>git clone</span><span> +網址 <strong> </strong></span><strong>從遠端倉儲複製到近端(並建立工作目錄)</strong></p>
<p><span>git pull</span><span>  </span><strong>將遠端倉儲之最新版本更新回來</strong></p>
<p><span>git status</span><span>  </span><strong>檢查狀態</strong></p>
<p><span>git log </span><span> </span><strong>查看版本之歷史紀錄</strong></p>
<p><span>git branch <span> </span><strong>檢視分支</strong></span></p>
<p><span><span>git branch name</span></span><span>  </span><strong><span>建立分支</span></strong></p>
<p><span>git checkout name</span><span>  </span><strong>切換分支</strong></p>
<p><span>git checkout -b name</span><span>  </span><strong>建立分支並切換至最新分支</strong></p>
<p><span>git checkout -d name</span><span>  </span><strong>刪除分支</strong></p>
<p>config --global user.name "40723102 or xxx" <span> </span><strong> 設定使用者名稱</strong></p>
<p><span>git config --global user.email "40723102@gm.</span><span>nfu.</span><span>edu.</span><span>tw"</span><span>   </span><strong>設定使用者信箱</strong></p>
<p><span>git init</span><span>  </span><strong>把當前目錄變成git可管理之倉儲</strong></p>
<p><span>git show</span><span>  </span><strong>查看該版本之相關資訊</strong></p>
<p><span>git bebase</span><span>  </span><strong>把另一分支變更,當作目前使用分支之基礎</strong></p>
<p><span>git remote add xxx</span><span> <span> </span><strong>註記在</strong></span><strong>遠端下</strong></p>
<p><span>git checkout .   <strong>回到上一個提交(當從上一個提交到下一次操作發生致命資料丟失使用</strong>)</span></p>
<p><span><span>git add .<span> </span><strong>拍快照</strong></span></span></p>
<p><span>git commit -m "標題or描述" <span> </span><strong>把暫存區之檔案提交到倉儲</strong></span></p>
<p><span>git push</span><span> </span><strong>把近端存儲庫中物件推到遠端倉儲</strong></p>
<h1>個人操作練習</h1>
>>>>>>> 6a40febdcc50abdb2066723ccf6dba381533f183
<p>從課堂中學習並練習所學</p>
<h2>建立個人的 Github Pages 網站</h2>
<p><yt-formatted-string class="style-scope ytd-video-primary-info-renderer">操作如何利用 p37 中的 git 建立個人的 Github Pages 網站</yt-formatted-string></p>
<ol>
<li><span>進入github.io網站，創建個人帳號</span></li>
<li><span>建立新的倉儲-40723102.github.io</span></li>
<li><span><span><span>git clone https://github.com/mdecourse/2018fall</span></span></span></li>
<li><span><span><span>git clone https://github.com/s40723120/s40723102.github.io</span></span></span></li>
<li><span>從2018fall資料夾複製裡面的檔案，排除.git和README.me，貼到自己的資料夾(40723102)內</span></li>
<li><span>git status(檢查狀態)-&gt;git add .(增加)-&gt;git commit -m "name"( 提交)-&gt;git push (推送至遠端)</span></li>
<li>完成</li>
</ol>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/rMKR70xsIIU" width="500"></iframe></p>
<h2>git 基本操作練習</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/nEYFt8Y2m5s" width="500"></iframe></p>
<h2>CMSimfly中插入影片</h2>
<p><span> 1.以 Leo Editor</span><span> 開啟 config/reveal.leo</span></p>
<p><span><img alt="" height="180" src="/images/011.png" width="229"/></span></p>
<p><span>2.到你要貼上的影片網站 , <span>點選下方分享</span></span></p>
<p><span><span>3.再點選嵌入 , <span>複製右方文字</span></span></span></p>
<p><span><span>4.至Leo Editor貼上</span></span></p>
<p><span><span>5.儲存</span></span></p>
<p>6.完成</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/s5MRoE-_v1c" width="500"></iframe></p>
<h2>更新倉儲</h2>
<p>倉儲版本更新</p>
<p><iframe allowfullscreen="allowfullscreen" height="360" src="//www.youtube.com/embed/7j5U9xiTAiE" width="500"></iframe></p>
<h2>學習解決倉儲合併衝突</h2>
<p>1.先將.htm檔拖曳到SciTE文字編輯器，找出衝突點。</p>
<p>2.刪除頭(&lt;&lt;&lt;&lt;&lt;&lt;&lt;)尾(&gt;&gt;&gt;&gt;&gt;&gt;&gt;)與接 合處 (=======)後，儲存並重新進入近端，將之轉成Generapage。</p>
<p>3.最後git add . -&gt;gitcommit -&gt;git push。</p>
<p><iframe allowfullscreen="allowfullscreen" height="360" src="//www.youtube.com/embed/os31rKiqWuo" width="500"></iframe></p>
<<<<<<< HEAD
<p></p>
<p></p><h1>目錄結構</h1>
=======
<h1>目錄結構</h1>
>>>>>>> 6a40febdcc50abdb2066723ccf6dba381533f183
<p>CMSimfly 的動態系統採用 Python3 + Flask 建構, 並且利用 Beatifulsoup 解讀位於 contig 目錄中的 content.htm 超文件檔案.</p>
<p>content.htm 檔案可以透過動態系統中的 generate_pages 功能, 將超文件轉為位於 content 目錄中的個別頁面檔案.</p>
<p>動態系統與靜態系統則共用 downloads, images, static 等目錄, 其中 downloads 目錄存放在動態系統上傳的文件檔, 而 images 目錄則存放動態系統所上傳的影像檔案, 包括 jpg, png 與 gif 等格式圖檔.</p>
<p>static 目錄則存放在動態與靜態系統所需要的 Javascript 或 Brython 程式檔.</p>
<h1>頁面編輯</h1>
<p>CMSimfly 動態系統的網際編輯器採用 <a href="https://www.tiny.cloud/">TinyMCE4</a>, 可以放入一般超文件,  納入圖檔, 嵌入影片連結, 並且加入帶有行數的原始碼.</p>
<p>透過 File Upload 功能, 可以一次上傳多個檔案,  存入 downloads 目錄中儲存, 之後各頁面可以引入對應連結.</p>
<p>而圖檔的上傳與引用與一般檔案類似, 但上傳後存入 images 目錄中.</p>
<h2>插入程式碼</h2>
<p>CMSimfly 目前使用 Syntaxhighlighter 3.0.83:</p>
<p> <a href="http://alexgorbatchev.com/SyntaxHighlighter/">http://alexgorbatchev.com/SyntaxHighlighter/</a> </p>
<p>進行頁面中的程式碼高亮顯示.</p>
<h3>Java 程式碼</h3>
<pre class="brush:java;auto-links:false;toolbar:false" contenteditable="false">import java.util.Scanner;

public class Life {
    public static void show(boolean[][] grid){
        String s = "";
        for(boolean[] row : grid){
            for(boolean val : row)
                if(val)
                    s += "*";
                else
                    s += ".";
            s += "\n";
        }
        System.out.println(s);
    }
    
    public static boolean[][] gen(){
        boolean[][] grid = new boolean[10][10];
        for(int r = 0; r &lt; 10; r++)
            for(int c = 0; c &lt; 10; c++)
                if( Math.random() &gt; 0.7 )
                    grid[r][c] = true;
        return grid;
    }
    
    public static void main(String[] args){
        boolean[][] world = gen();
        show(world);
        System.out.println();
        world = nextGen(world);
        show(world);
        Scanner s = new Scanner(System.in);
        while(s.nextLine().length() == 0){
            System.out.println();
            world = nextGen(world);
            show(world);
            
        }
    }
    
    public static boolean[][] nextGen(boolean[][] world){
        boolean[][] newWorld 
            = new boolean[world.length][world[0].length];
        int num;
        for(int r = 0; r &lt; world.length; r++){
            for(int c = 0; c &lt; world[0].length; c++){
                num = numNeighbors(world, r, c);
                if( occupiedNext(num, world[r][c]) )
                    newWorld[r][c] = true;
            }
        }
        return newWorld;
    }
    
    public static boolean occupiedNext(int numNeighbors, boolean occupied){
        if( occupied &amp;&amp; (numNeighbors == 2 || numNeighbors == 3))
            return true;
        else if (!occupied &amp;&amp; numNeighbors == 3)
            return true;
        else
            return false;
    }

    private static int numNeighbors(boolean[][] world, int row, int col) {
        int num = world[row][col] ? -1 : 0;
        for(int r = row - 1; r &lt;= row + 1; r++)
            for(int c = col - 1; c &lt;= col + 1; c++)
                if( inbounds(world, r, c) &amp;&amp; world[r][c] )
                    num++;

        return num;
    }

    private static boolean inbounds(boolean[][] world, int r, int c) {
        return r &gt;= 0 &amp;&amp; r &lt; world.length &amp;&amp; c &gt;= 0 &amp;&amp;
        c &lt; world[0].length;
    }

}</pre>
<p></p>
<h3>Python 程式碼</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def parse_content():
    """use bs4 and re module functions to parse content.htm"""
    #from pybean import Store, SQLiteWriter
    # if no content.db, create database file with cms table
    '''
    if not os.path.isfile(config_dir+"content.db"):
        library = Store(SQLiteWriter(config_dir+"content.db", frozen=False))
        cms = library.new("cms")
        cms.follow = 0
        cms.title = "head 1"
        cms.content = "content 1"
        cms.memo = "first memo"
        library.save(cms)
        library.commit()
    '''
    # if no content.htm, generate a head 1 and content 1 file
    if not os.path.isfile(config_dir+"content.htm"):
        # create content.htm if there is no content.htm
        File = open(config_dir + "content.htm", "w", encoding="utf-8")
        File.write("&lt;h1&gt;head 1&lt;/h1&gt;content 1")
        File.close()
    subject = file_get_contents(config_dir+"content.htm")
    # deal with content without content
    if subject == "":
        # create content.htm if there is no content.htm
        File = open(config_dir + "content.htm", "w", encoding="utf-8")
        File.write("&lt;h1&gt;head 1&lt;/h1&gt;content 1")
        File.close()
        subject = "&lt;h1&gt;head 1&lt;/h1&gt;content 1"
    # initialize the return lists
    head_list = []
    level_list = []
    page_list = []
    # make the soup out of the html content
    soup = bs4.BeautifulSoup(subject, 'html.parser')
    # 嘗試解讀各種情況下的標題
    soup = _remove_h123_attrs(soup)
    # 改寫 content.htm 後重新取 subject
    with open(config_dir + "content.htm", "wb") as f:
        f.write(soup.encode("utf-8"))
    subject = file_get_contents(config_dir+"content.htm")
    # get all h1, h2, h3 tags into list
    htag= soup.find_all(['h1', 'h2', 'h3'])
    n = len(htag)
    # get the page content to split subject using each h tag
    temp_data = subject.split(str(htag[0]))
    if len(temp_data) &gt; 2:
        subject = str(htag[0]).join(temp_data[1:])
    else:
        subject = temp_data[1]
    if n &gt;1:
            # i from 1 to i-1
            for i in range(1, len(htag)):
                head_list.append(htag[i-1].text.strip())
                # use name attribute of h* tag to get h1, h2 or h3
                # the number of h1, h2 or h3 is the level of page menu
                level_list.append(htag[i-1].name[1])
                temp_data = subject.split(str(htag[i]))
                if len(temp_data) &gt; 2:
                    subject = str(htag[i]).join(temp_data[1:])
                else:
                    subject = temp_data[1]
                # cut the other page content out of htag from 1 to i-1
                cut = temp_data[0]
                # add the page content
                page_list.append(cut)
    # last i
    # add the last page title
    head_list.append(htag[n-1].text.strip())
    # add the last level
    level_list.append(htag[n-1].name[1])
    temp_data = subject.split(str(htag[n-1]))
    # the last subject
    subject = temp_data[0]
    # cut the last page content out
    cut = temp_data[0]
    # the last page content
    page_list.append(cut)
    return head_list, level_list, page_list

</pre>
<p></p>
<h3>C或C++程式碼</h3>
<p>請注意, 目前 CMSimfly 標題內文無法解讀 "/" 符號, 因此若本頁面的標題為  "C/C++程式碼", 則無法進行分頁.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* Runge Kutta for a set of first order differential equations */
 
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
 
#define N 2 /* number of first order equations */
#define dist 0.1 /* stepsize in t*/
#define MAX 30.0 /* max for t */
 
FILE *output; /* internal filename */
FILE *output1; /* internal filename */
// 利用 pipe 呼叫 gnuplot 繪圖
FILE *pipe;
 
void runge4(double x, double y[], double step); /* Runge-Kutta function */
double f(double x, double y[], int i); /* function for derivatives */
 
void main(){
 
  double t, y[N];
  int j;
 
  output=fopen("osc.dat", "w"); /* external filename */
  output1=fopen("osc1.dat", "w"); /* external filename */
 
  y[0]=1.0; /* initial position */
  y[1]=0.0; /* initial velocity */
 
  //fprintf(output, "0\t%f\n", y[0]);
 
  for (j=1; j*dist&lt;=MAX ;j++) /* time loop */{
 
    t=j*dist;
    runge4(t, y, dist);
    fprintf(output, "%f\t%f\n", t, y[0]);
    fprintf(output1, "%f\t%f\n", t, y[1]);
  }
 
  fclose(output);
  fclose(output1);
 
  pipe = popen("gnuplot -persist","w");
  //fprintf(pipe,"set term png enhanced font \"v:/fireflysung.ttf\" 18 \n");
  fprintf(pipe,"set term png enhanced font \"y:/wqy-microhei.ttc\" 18 \n");
  //fprintf(pipe,"set yrange [68:70]\n");
  fprintf(pipe,"set output \"test.png\"\n");
  fprintf(pipe, "plot \"osc.dat\" title \"位移\" with lines, \"osc1.dat\" title \"速度\" with lines\n");
  fprintf(pipe,"quit\n");

  fprintf(pipe,"quit\n");
  pclose(pipe);
}
 
void runge4(double x, double y[], double step){
 
  double h=step/2.0, /* the midpoint */
  t1[N], t2[N], t3[N], /* temporary storage arrays */
  k1[N], k2[N], k3[N],k4[N]; /* for Runge-Kutta */
  int i;
 
  for (i=0;i&lt;N;i++){
 
    t1[i]=y[i]+0.5*(k1[i]=step*f(x,y,i));
  }
 
  for (i=0;i&lt;N;i++){
 
    t2[i]=y[i]+0.5*(k2[i]=step*f(x+h, t1, i));
  }
 
  for (i=0;i&lt;N;i++){
 
    t3[i]=y[i]+ (k3[i]=step*f(x+h, t2, i));
  }
 
  for (i=0;i&lt;N;i++){
 
    k4[i]= step*f(x+step, t3, i);
  }
 
  for (i=0;i&lt;N;i++){
 
    y[i]+=(k1[i]+2*k2[i]+2*k3[i]+k4[i])/6.0;
  }
}
 
double f(double x, double y[], int i){
 
  if (i==0)
    x=y[1]; /* derivative of first equation */
  if (i==1)
    x=-y[0]-0.5*y[1];
  return x;
}</pre>
<p></p>
<h3>Lua 程式碼</h3>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">-- 導入 js 模組
js = require("js")
-- 取得 window
window = js.global
-- 猜小於或等於 n 的整數
big = 100
-- 計算猜測次數, 配合 while 至少會猜一次
num = 1
-- 利用 window:prompt 方法回應取得使用者所猜的整數
guess = window:prompt("請猜一個介於 1 到 "..big.." 的整數")
-- 利用數學模組的 random 函數以亂數產生答案
answer = math.random(big)
output = ""
-- 若沒猜對, 一直猜到對為止
while answer ~= tonumber(guess) do
    if answer &gt; tonumber(guess) then
        output = "猜第 "..num.." 次, guess="..guess..", answer="..answer.." - too small"
        print(output)
    else
        output = "猜第 "..num.." 次, guess="..guess..", answer="..answer.." - too big"
        print(output)
    end 
    guess = window:prompt(output..", 請猜一個介於 1 到 "..big.." 的整數")
    num = num + 1
end
print("總共猜了 "..num.." 次, answer=guess="..answer.." - correct")
    </pre>
<p></p>
<h3>Javascript 程式碼</h3>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">STLViewer = function(stlpath, plotarea) {

	var mycanvas = document.getElementById(plotarea);
	var viewer = new JSC3D.Viewer(mycanvas)
	var theScene = new JSC3D.Scene;
	////Initialize with a default file:
	//var stlpath = "../../../assets/2013-10-23/stl/box.STL"
	//var stlpath = "../../../assets/2013-10-23/stl/taj.stl"
	viewer.setParameter('SceneUrl', stlpath);
    viewer.setParameter('InitRotationX', 20);
	viewer.setParameter('InitRotationY', 20);
	viewer.setParameter('InitRotationZ', 0);
	viewer.setParameter('ModelColor', '#CAA618');
	viewer.setParameter('BackgroundColor1', '#FFFFFF');
	viewer.setParameter('BackgroundColor2', '#383840');
	viewer.init();
	viewer.update();
	////init done
	var canvas_drop = document.getElementById('canvas-drop')
	/*var dropzone = document.getElementById('dropzone')
	dropzone.addEventListener('dragover', handleDragOver, false);
	dropzone.addEventListener('drop', handleFileSelect, false); */
	canvas_drop.addEventListener('dragover', handleDragOver, false);
	canvas_drop.addEventListener('drop', handleFileSelect, false);

////Drag and drop logic:
	function handleFileSelect(evt) {
	    evt.stopPropagation();
	    evt.preventDefault();
	    var files = evt.dataTransfer.files;
	    console.log(evt)
	    console.log(files)
	    preview_stl(files[0])
	  }

	  function handleDragOver(evt) {
	    evt.stopPropagation();
	    evt.preventDefault();
	    evt.dataTransfer.dropEffect = 'copy';
	  }

////jsc3d logic
	var handle_file_select = function(e) {
		e.stopPropagation()
		e.preventDefault()
		var f = e.target.files[0]
		preview_stl(f)
	}

	function preview_stl(f) {
		var reader = new FileReader()
		var ext = f.name.split(".")[1]

		function setup_viewer() {
			viewer.setParameter('InitRotationX', 20);
			viewer.setParameter('InitRotationY', 20);
			viewer.setParameter('InitRotationZ', 0);
			viewer.setParameter('ModelColor', '#CAA618');
			viewer.setParameter('BackgroundColor1', '#FFFFFF');
			viewer.setParameter('BackgroundColor2', '#383840');
			viewer.setParameter('RenderMode', "flat");
		}
		setup_viewer()

		reader.onload = (function(file) {
			return function(e) {
				theScene = new JSC3D.Scene
		    	stl_loader = new JSC3D.StlLoader()
		    	stl_loader.parseStl(theScene, e.target.result)
		      	//viewer.init()
		      	viewer.replaceScene(theScene)
		      	viewer.update()
		      	console.log("file reader onload")
			}
		})(f)

		if (ext.toLowerCase() != "stl") {
			alert("That doesn't appear to be an STL file.");
		} else {
			reader.readAsBinaryString(f)
		}
	}
}
</pre>
<p></p>
<h3>Html 原始碼</h3>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;html&gt;
   &lt;head&gt;
      &lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
      &lt;title&gt;CMSimfly&lt;/title&gt;
      &lt;link rel="stylesheet" type="text/css" href="/static/cmsimply.css"&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;div class='container'&gt;
      &lt;nav&gt;
         &lt;ul id='css3menu1' class='topmenu'&gt;
            &lt;li&gt;&lt;a href='/get_page/簡介'&gt;簡介&lt;/a&gt;
            &lt;li&gt;&lt;a href='/get_page/目錄結構'&gt;目錄結構&lt;/a&gt;
            &lt;li&gt;
               &lt;a href='/get_page/頁面編輯'&gt;頁面編輯&lt;/a&gt;
               &lt;ul&gt;
                  &lt;li&gt;
                     &lt;a href='/get_page/插入程式碼'&gt;插入程式碼&lt;/a&gt;
                     &lt;ul&gt;
                        &lt;li&gt;&lt;a href='/get_page/Java 程式碼'&gt;Java 程式碼&lt;/a&gt;
                        &lt;li&gt;&lt;a href='/get_page/Python 程式碼'&gt;Python 程式碼&lt;/a&gt;
                        &lt;li&gt;&lt;a href='/get_page/C或C++程式碼'&gt;C或C++程式碼&lt;/a&gt;
                        &lt;li&gt;&lt;a href='/get_page/Lua 程式碼'&gt;Lua 程式碼&lt;/a&gt;
                        &lt;li&gt;&lt;a href='/get_page/Javascript 程式碼'&gt;Javascript 程式碼&lt;/a&gt;
                        &lt;li&gt;&lt;a href='/get_page/Html 原始碼'&gt;Html 原始碼&lt;/a&gt;&lt;/li&gt;
                        &lt;/li&gt;
                     &lt;/ul&gt;
               &lt;/ul&gt;
            &lt;li&gt;&lt;a href='/get_page/網際簡報'&gt;網際簡報&lt;/a&gt;
            &lt;li&gt;&lt;a href='/get_page/網誌編輯'&gt;網誌編輯&lt;/a&gt;
            &lt;li&gt;&lt;a href='/get_page/已知錯誤'&gt;已知錯誤&lt;/a&gt;&lt;/li&gt;
         &lt;/ul&gt;
      &lt;/nav&gt;
      &lt;section&gt;
         &lt;form method='post' action='/ssavePage'&gt;
         &lt;textarea class='simply-editor' name='page_content' cols='50' rows='15'&gt;&lt;h3&gt;Html 原始碼&lt;/h3&gt;&lt;/textarea&gt;
         &lt;input type='hidden' name='page_order' value='9'&gt;
         &lt;input type='submit' value='save'&gt;
         &lt;input type=button onClick="location.href='/get_page/Html 原始碼'" value='viewpage'&gt;
         &lt;/form&gt;
      &lt;/section&gt;
   &lt;/body&gt;
&lt;/html&gt;
COPY TO CLIPBOARD	</pre>
<p></p>
<h1>網際簡報</h1>
<p>CMSimfly 中採用 <a href="https://revealjs.com/#/">Reveal.js</a> 作為網際簡報, 其中的維護檔案位於 config/reveal.js, 而對應的簡報檔案則位於 reveal 目錄中.</p>
<<<<<<< HEAD
<h1>Virtualbox</h1>
<h2>Virtualbox介紹</h2>
<p><img alt="" height="195" src="/images/virtualbox.png" width="337"/></p>
<p><span>利用 Virtualbox 建立虛擬 Ubuntu 18.04 網際內容管理系統伺服主機:</span><br/><span><span>1</span>. 安裝最新版的 Virtualbox</span><br/><span><span>2</span>. 建立 Ubuntu 18.04 虛擬主機</span><br/><span><span>3</span>. 以網路卡橋接啟動 Ubuntu 伺服器</span><br/><span><span>4</span>. 以 sudo apt install nginx 安裝 nginx WWW 伺服器</span><br/><span><span>5</span>. 以 ifconfig 查 Ubuntu 伺服器的 IP, 測試 nginx 伺服器是否可以連線</span><br/><span><span>6</span>. 以 Windows 10  下的 Filezilla client, 將編輯好的 nginx 設定檔案送到 Ubuntu</span><br/><span><span>7</span>. 利用 Ubuntu 指令將設定檔案搬至設定位置後, 以 /etc/init.d/nginx restart 重新啟動 nginx</span><br/><span><span>8</span>. 在 Ubuntu 中以 sudo apt install uwsgi 安裝 uwsgi</span><br/><span><span>9</span>. 在 Windows 10 編輯 uwsgi 與 nginx 所需的設定檔案, 完成後以 filezilla 送至 Ubuntu.</span><br/><span><span>10</span>. 將 CMSimfly 程式碼送到 Ubuntu 伺服器中對應目錄後.</span><br/><span><span>11</span>. 在 Ubuntu 建立 cmsimfly 服務, 並設定隨機啟動.</span><br/><span><span>12</span>. 完成後, 在 Windows 10 以瀏覽器連線至 CMSimfly, 確認動態網頁與靜態網頁可以在虛擬主機中正常啟動.</span><br/><span><span>13</span>. 以上相關網際內容管理在機械工程相關應用可參考: </span><span><a href="https://www.driveworks.co.uk/">https://www.driveworks.co.uk</a> 或 <a href="https://robotbenchmark.net/">https://robotbenchmark.net/</a></span>Virtualbox</p>
<h2>VitualBox特色</h2>
<p>                                                      <img caption="false" height="154" src="/images/493b6fa2e3edb.png" width="154"/></p>
<p><span style="color: #ff0000;">能安裝多個客戶端作業系統，每個客戶端系統皆可獨立開啟、暫停與停止。</span></p>
<ul>
<li>支援64位元客戶端作業系統，即使主機使用<a class="mw-redirect" href="https://zh.wikipedia.org/wiki/32%E4%BD%8D" title="32位元">32位元</a><a class="mw-redirect" href="https://zh.wikipedia.org/wiki/CPU" title="中央處理器">CPU</a>(6.0版後主機僅支援64位元作業系統)</li>
<li>支援<a href="https://zh.wikipedia.org/wiki/SATA" title="SATA">SATA</a>硬碟<a class="mw-redirect" href="https://zh.wikipedia.org/wiki/NCQ" title="NCQ">NCQ</a>技術</li>
<li>虛擬硬碟快照</li>
<li>無縫視窗模式（須安裝客戶端驅動程式）</li>
<li>能夠在主機端與客戶端共用剪貼簿（須安裝客戶端驅動）</li>
<li>在<span style="color: #ff0000;">主機端與客戶端間建立共用資料夾</span>（須安裝客戶端驅動）</li>
<li>內建遠端桌面伺服器</li>
<li>支援VMware VMDK磁碟檔及Virtual PC VHD磁碟檔格式</li>
<li>3D虛擬化技術支援OpenGL（2.1版後支援）、Direct3D（3.0版後支援）、WDDM（4.1版後支援）</li>
<li>最多虛擬32顆<a class="mw-redirect" href="https://zh.wikipedia.org/wiki/CPU" title="中央處理器">CPU</a>（3.0版後支援）</li>
<li>支援VT-x與AMD-V硬體虛擬化技術</li>
<li><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">iSCSI支援</span></span></li>
<li>USB與USB2.0支援</li>
</ul>
<h2>VitualBox操作練習</h2><h2>VitualBox老師課程</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/sFU7TD1gQhs" width="400"></iframe><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/pwjbInbJCdw" width="400"></iframe></p>
<p><span>Virtualbox按鍵解說:</span></p>
<p><span><span>K</span>&gt;上</span></p>
<p><span><span>J</span>&gt;下</span></p>
<p><span><span>H</span>&gt;左</span></p>
<p><span><span>L</span>&gt;右</span></p>
<p><span>Tab or上下&gt;選擇</span></p>
<p>space鍵[x]Install//OpenSSH</p>
<p>Sudo apt install nginx&gt;1.動能配置 2.開機前設定網路(Bridged Real...)</p>
<p><span>Sudo(管理員身分)      nginx(3W伺服)</span></p>
<p><span>總結: VirtualBox 是一個<span style="color: #ff6600;">虛擬化軟體</span>也不用錢，我們<span style="color: #ff6600;">可以使用 VirtualBox 來產生一台或多台虛擬化的電腦</span>，然後<span style="color: #ff6600;">再將我們想要的作業系統裝在虛擬化的電腦中</span>。</span></p>
<p></p><h1>已知錯誤</h1>
=======
<h1>網誌編輯</h1>
<p>CMSimfly 採用 <a href="https://blog.getpelican.com/">Pelican blog</a> 系統, 編輯檔案位於 config/pelican.leo, 對應的</p>
<p> Markdown 原始檔案位於 markdown 目錄中, 而經 Pelican 轉換出的網誌超文件檔案則位於 blog 目錄中.</p>
<p>執行 Pelican 之前, 必須先安裝下列模組:</p>
<p style="padding-left: 30px;">pip install pelican Markdown</p>
<p>其餘在網誌文章中所需要的 Javascript 或 Brython 程式檔案, 則與 CMSimfly 及 Reveal.js 共用, 位於 static 目錄下.</p>
<p>上傳檔案與圖檔的引用則與 CMSimfly 架構相同.</p>
<h1>已知錯誤</h1>
>>>>>>> 6a40febdcc50abdb2066723ccf6dba381533f183
<h4>全部頁面會因無法正確解讀而誤刪</h4>
<p>在特定情況下, 系統會誤刪 config/content.htm 檔案, 目前在單頁或全部頁面編輯存檔之前, 或將上一版本的 content.htm 存入 content_back.htm, 若 content.htm 內容被程式誤刪, 可以利用備份檔案複製回原始內容後, 再進行後續處理.</p>
<h4>頁面標題不支援特殊符號</h4>
<p>各頁面標題目前不支援特殊符號, 例如: "/", "?" 等, 若已經發生程式無法解讀頁面的情況, 只能從編輯 config/content.htm 下手, 若系統位於遠端, 則後續必須要再設法提供一個額外的編輯 config/content.htm 檔案的網際連結功能.</p>
<h4>Video 引用不支援內部引用</h4>
<p>tinymce 中插入 video 的小視窗, 要移除引用的圖像與連結, 因為一般建議不要在內容中存入 .mp4 的影片資料, 而只接受引入影片 URL 連結.</p>